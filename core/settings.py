"""
    Django settings for SmartServe project.

    Partially generated by "django-admin startproject" using Django 4.2.1.
"""

from copy import copy
from pathlib import Path
from typing import Any, Iterable, Sequence

from django.core.exceptions import ImproperlyConfigured
from environ import Env  # type: ignore


BASE_DIR: Path = Path(__file__).resolve().parent.parent  # NOTE: Build paths inside the project like this: BASE_DIR / "subdir"


Env.read_env(BASE_DIR / ".env")
env: Env = Env(
    PRODUCTION=(bool, True),
    PASSWORD_SIMILARITY_TO_USER_ATTRIBUTES=(float, 0.627),
    AUTH_TOKEN_MINIMUM_REFRESH_INTERVAL=(float, 300),
    API_RESPONSE_PAGINATION_SIZE=(int, 50),
)


# Production Vs Development settings

if env("PRODUCTION"):
    prod_env: Env = Env(
        ALLOWED_HOSTS=(list, ["smartserve"]),
        ALLOWED_ORIGINS=(list, ["https://smartserve.com"]),
        LOG_LEVEL=(str, "WARNING")
    )

    log_level: str = prod_env("LOG_LEVEL").upper()

    DEBUG: bool = False  # NOTE: Security Warning - Don't run with debug turned on in production!

    ALLOWED_HOSTS: Iterable[str] = prod_env("ALLOWED_HOSTS")
    ALLOWED_ORIGINS: Iterable[str] = prod_env("ALLOWED_ORIGINS")
    CSRF_TRUSTED_ORIGINS: Iterable[str] = copy(ALLOWED_ORIGINS)
else:
    dev_env: Env = Env(
        DEBUG=(bool, True),
        ALLOWED_HOSTS=(list, ["localhost"]),
        LOG_LEVEL=(str, "INFO")
    )

    log_level = dev_env("LOG_LEVEL").upper()

    DEBUG = dev_env("DEBUG")

    ALLOWED_HOSTS = dev_env("ALLOWED_HOSTS")


if not 0.1 <= env("PASSWORD_SIMILARITY_TO_USER_ATTRIBUTES") <= 1.0:
    raise ImproperlyConfigured("PASSWORD_SIMILARITY_TO_USER_ATTRIBUTES must be a float between 0.1 and 1.0.")

if not 1.0 <= env("AUTH_TOKEN_MINIMUM_REFRESH_INTERVAL"):
    raise ImproperlyConfigured("PASSWORD_SIMILARITY_TO_USER_ATTRIBUTES must be a float greater than or equal to 1.0")

if not env("API_RESPONSE_PAGINATION_SIZE") > 0:
    raise ImproperlyConfigured("API_RESPONSE_PAGINATION_SIZE must be an integer greater than 0.")

log_level_choices: Iterable[str] = ("DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL")
if log_level not in log_level_choices:
    raise ImproperlyConfigured(f"LOG_LEVEL must be one of {log_level_choices}.")


# Django REST Framework settings

REST_FRAMEWORK: dict[str, Any] = {
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_AUTHENTICATION_CLASSES": ["knox.auth.TokenAuthentication"],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "PAGE_SIZE": env("API_RESPONSE_PAGINATION_SIZE")
}
REST_KNOX: dict[str, Any] = {
    "AUTO_REFRESH": True,
    "MIN_REFRESH_INTERVAL": env("AUTH_TOKEN_MINIMUM_REFRESH_INTERVAL")
}


# Logging settings

# noinspection SpellCheckingInspection
LOGGING: dict[str, Any] = {
    "version": 1,
    "formatters": {
        "smartserve": {
            "format": "{levelname} - {module}: {message}",
            "style": "{"
        },
        "web_server": {
            "format": "[{asctime}] {message}",
            "datefmt": "%d/%b/%Y %H:%M:%S",
            "style": "{"
        }
    },
    "handlers": {
        "smartserve": {
            "class": "logging.StreamHandler",
            "formatter": "smartserve"
        },
        "web_server": {
            "class": "logging.StreamHandler",
            "formatter": "web_server"
        }
    },
    "loggers": {
        "django.server": {"handlers": ["web_server"], "level": log_level}
    },
    "root": {"handlers": ["smartserve"], "level": log_level}
}


# Web Server settings

WSGI_APPLICATION: str = "core.wsgi.application"
ROOT_URLCONF: str = "core.urls"
SECRET_KEY: str = env("SECRET_KEY")  # NOTE: Security Warning - The secret key is used for important secret stuff (keep the one used in production a secret!)
STATIC_ROOT: str = "/staticfiles/"
STATIC_URL: str = "static/"
CSRF_COOKIE_SECURE: bool = True
SESSION_COOKIE_SECURE: bool = True


# Application Definition

INSTALLED_APPS: Sequence[str] = [
    "smartserve",
    "django.contrib.admindocs",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "knox"
]
MIDDLEWARE: Sequence[str] = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware"
]


# Template settings

TEMPLATES: Sequence[dict[str, Any]] = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages"
            ]
        }
    }
]


# Database settings

DATABASES: dict[str, dict[str, str]] = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
DEFAULT_AUTO_FIELD: str = "django.db.models.BigAutoField"


# Authentication settings

AUTH_PASSWORD_VALIDATORS: Sequence[dict[str, Any]] = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        "OPTIONS": {
            "user_attributes": ("username", "first_name", "last_name"),
            "max_similarity": env("PASSWORD_SIMILARITY_TO_USER_ATTRIBUTES")
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
AUTH_USER_MODEL: str = "smartserve.User"


# Internationalization, Language & Time settings

LANGUAGE_CODE: str = "en-gb"
TIME_ZONE: str = "Europe/London"
USE_I18N: bool = True
USE_TZ: bool = True
