# Generated by Django 4.2.1 on 2023-06-06 09:38

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import smartserve.models.managers
import smartserve.models.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('employee_id', models.CharField(blank=True, default=smartserve.models.utils.generate_employee_id, error_messages={'unique': 'A user with that ID already exists.'}, max_length=6, unique=True, validators=[django.core.validators.RegexValidator('^\\d+\\Z'), django.core.validators.MinLengthValidator(6)], verbose_name='Employee ID')),
                ('first_name', models.CharField(max_length=75, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=75, verbose_name='Last Name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Is Admin?')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Is Active?')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date Joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
            },
            managers=[
                ('objects', smartserve.models.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator('^[A-Za-z ]+\\Z'), django.core.validators.MinLengthValidator(2)], verbose_name='Name')),
                ('employees', models.ManyToManyField(blank=True, help_text='The set of employees at this restaurant. (Hold down “Control”, or “Command” on a Mac, to select more than one.)', related_name='restaurants', to=settings.AUTH_USER_MODEL, verbose_name='Employees')),
            ],
            options={
                'verbose_name': 'Restaurant',
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(verbose_name='Number')),
                ('container_table', models.ForeignKey(blank=True, help_text='The reference to the parent container table, if this table object is a sub-table.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sub_tables', to='smartserve.table', verbose_name='Parent Container Table')),
                ('restaurant', models.ForeignKey(help_text='The restaurant that this table is within.', on_delete=django.db.models.deletion.CASCADE, related_name='tables', to='smartserve.restaurant', verbose_name='Restaurant')),
            ],
            options={
                'verbose_name': 'Table',
            },
        ),
        migrations.AddConstraint(
            model_name='table',
            constraint=models.UniqueConstraint(fields=('number', 'restaurant'), name='unique_restaurant_table_number'),
        ),
    ]
