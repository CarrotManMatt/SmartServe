# Generated by Django 4.2.1 on 2023-06-01 22:19

import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import smartserve.models
import smartserve.models.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('employee_id', models.CharField(blank=True, default=smartserve.models.utils.generate_employee_id, error_messages={'unique': 'A user with that ID already exists.'}, max_length=6, unique=True, validators=[django.core.validators.RegexValidator('^\\d+\\Z'), django.core.validators.MinLengthValidator(6)], verbose_name='employee ID')),
                ('first_name', models.CharField(max_length=75, verbose_name='first name')),
                ('last_name', models.CharField(max_length=75, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='is admin?')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='is active?')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', smartserve.models.managers.Custom_User_Manager()),
            ],
        ),
    ]
