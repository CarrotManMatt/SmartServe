# Generated by Django 4.2.3 on 2023-07-23 00:08

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import smartserve.models.managers
import smartserve.models.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('employee_id', models.CharField(blank=True, default=smartserve.models.utils.generate_employee_id, error_messages={'max_length': 'The Employee ID must be 6 digits.', 'unique': 'A user with that Employee ID already exists.'}, max_length=6, unique=True, validators=[django.core.validators.RegexValidator('^\\d+\\Z', 'The Employee ID must be a 6 digit number.'), django.core.validators.MinLengthValidator(6, 'The Employee ID must be 6 digits.')], verbose_name='Employee ID')),
                ('first_name', models.CharField(max_length=75, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=75, verbose_name='Last Name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='Is Admin?')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='Is Active?')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Date Joined')),
            ],
            options={
                'verbose_name': 'User',
            },
            managers=[
                ('objects', smartserve.models.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(verbose_name='Start Date & Time')),
                ('end', models.DateTimeField(verbose_name='End Date & Time')),
            ],
            options={
                'verbose_name': 'Booking',
            },
        ),
        migrations.CreateModel(
            name='Face',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_url', models.URLField(max_length=500, unique=True, verbose_name='Image URL')),
                ('gender_value', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3')], verbose_name='Gender Value')),
                ('skin_colour_value', models.PositiveIntegerField(choices=[(2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')], verbose_name='Skin Colour Value')),
                ('age_category', models.CharField(choices=[('YNG', 'Young'), ('AVG', 'Average'), ('OLD', 'Old')], max_length=3, verbose_name='Age Category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator("^(?![\\s'-])(?!.*[\\s'-]{2})[A-Za-z '-]+(?<![\\s'-])\\Z"), django.core.validators.MinLengthValidator(2)], verbose_name='Name')),
                ('description', models.TextField(blank=True, error_messages={'null': 'Description field cannot be null, use an empty string instead.'}, help_text='Longer textfield containing a description of this menu item.', max_length=200, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Menu Item',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.PositiveIntegerField(choices=[(0, 'Appetiser'), (1, 'Starter'), (2, 'Main Course'), (3, 'Dessert')], verbose_name='Course')),
                ('notes', models.TextField(blank=True, error_messages={'null': 'Notes field cannot be null, use an empty string instead.'}, help_text='Longer textfield containing any notes to the kitchen about how to prepare this order.', max_length=200, verbose_name='Notes')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='orders', to='smartserve.menuitem')),
            ],
            options={
                'verbose_name': 'Ordered Menu Item',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.RegexValidator("^(?![\\s'-])(?!.*[\\s'-]{2})[A-Za-z '-]+(?<![\\s'-])\\Z"), django.core.validators.MinLengthValidator(2)], verbose_name='Name')),
                ('employees', models.ManyToManyField(blank=True, help_text='The set of employees at this restaurant.', related_name='restaurants', to=settings.AUTH_USER_MODEL, verbose_name='Employees')),
            ],
            options={
                'verbose_name': 'Restaurant',
            },
        ),
        migrations.CreateModel(
            name='Seat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location_index', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='Location Index')),
            ],
            options={
                'verbose_name': 'Seat',
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Number')),
                ('container_table', models.ForeignKey(blank=True, help_text='The reference to the parent container table, if this table object is a sub-table.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sub_tables', to='smartserve.table', verbose_name='Parent Container Table')),
                ('restaurant', models.ForeignKey(help_text='The restaurant that this table is within.', on_delete=django.db.models.deletion.CASCADE, related_name='tables', to='smartserve.restaurant', verbose_name='Restaurant')),
            ],
            options={
                'verbose_name': 'Table',
            },
        ),
        migrations.CreateModel(
            name='SeatBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking', models.ForeignKey(help_text='The overall Booking that this Seat Booking is a part of.', on_delete=django.db.models.deletion.CASCADE, related_name='seat_bookings', to='smartserve.booking', verbose_name='Booking')),
                ('face', models.ForeignKey(help_text='The face to represent the customer of this seat booking.', on_delete=django.db.models.deletion.PROTECT, related_name='bookings', to='smartserve.face', verbose_name='Face')),
                ('ordered_menu_items', models.ManyToManyField(blank=True, help_text='The set of menu items ordered by this seat booking.', related_name='+', through='smartserve.Order', to='smartserve.menuitem', verbose_name='Ordered Menu Items')),
                ('seat', models.ForeignKey(help_text='The Seat that this is a booking for.', on_delete=django.db.models.deletion.PROTECT, related_name='seat_bookings', to='smartserve.seat', verbose_name='Seat')),
            ],
            options={
                'verbose_name': 'Seat Booking',
            },
        ),
        migrations.AddField(
            model_name='seat',
            name='table',
            field=models.ForeignKey(help_text='The Table this seat is at.', on_delete=django.db.models.deletion.CASCADE, related_name='_seats', to='smartserve.table', verbose_name='Table'),
        ),
        migrations.AddField(
            model_name='order',
            name='seat_booking',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='smartserve.seatbooking'),
        ),
        migrations.AddField(
            model_name='menuitem',
            name='available_at_restaurants',
            field=models.ManyToManyField(blank=True, help_text='The set of restaurants that this menu item is available at.', related_name='menu_items', to='smartserve.restaurant', verbose_name='Available At Restaurants'),
        ),
        migrations.AddConstraint(
            model_name='booking',
            constraint=models.CheckConstraint(check=models.Q(('end__gt', models.F('start'))), name='check_start_end', violation_error_message='Start Date & Time must be before End Date & Time.'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddConstraint(
            model_name='table',
            constraint=models.UniqueConstraint(fields=('number', 'restaurant'), name='unique_restaurant_table_number'),
        ),
        migrations.AddConstraint(
            model_name='seatbooking',
            constraint=models.UniqueConstraint(fields=('seat', 'booking'), name='unique_seat_booking'),
        ),
        migrations.AddConstraint(
            model_name='seatbooking',
            constraint=models.UniqueConstraint(fields=('booking', 'face'), name='face_unique_in_booking'),
        ),
        migrations.AddConstraint(
            model_name='seat',
            constraint=models.UniqueConstraint(fields=('table', 'location_index'), name='unique_table_location_index'),
        ),
    ]
